package <%= options[:package] %>.<%= options[:repositories_package] %>;

import java.lang.reflect.ParameterizedType;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class GenericRepository<T> {
	
	private final SessionFactory factory;
	private final Class<T> clazz;

	public GenericRepository(SessionFactory factory) {
		this.factory = factory;
		
		@SuppressWarnings("unchecked")
		Class<T> clazz = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];

		this.clazz = clazz;
	}
	
	private Session session() {
		return factory.getCurrentSession();
	}
	
	public void add(T entity) {
		session().persist(entity);
	}

	@SuppressWarnings("unchecked")
	public T update(T entity) {
		return (T) session().merge(entity);
	}
	
	public void remove(T entity) {
		session().delete(entity);
	}
	
	@SuppressWarnings("unchecked")
	public T get(I id) {
		return (T) session().get(clazz, id);
	}
	
	@SuppressWarnings("unchecked")
	public List<T> getAll() {
		return session().createQuery("from " + clazz.getName()).list();
	}
}
